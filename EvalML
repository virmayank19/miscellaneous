

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt

# Load your CSV data
file_path = 'your_data.csv'
data = pd.read_csv(file_path)

# Function to create Single Value chart
def create_single_value_chart(query):
    field_name = query["field name"]
    aggregation_applied = query["aggregation applied"]
    filter_criteria = query["filter criteria"]

    filtered_data = data[data[filter_criteria["field name"]].apply(lambda x: eval(f'x {filter_criteria["operator"]} {filter_criteria["value"]}'))]
    result = filtered_data[field_name].agg(aggregation_applied)

    # Plotting
    plt.figure(figsize=(6, 4))
    plt.bar(["Result"], [result])
    plt.title("Single Value Chart")
    st.pyplot()

# Function to create other charts
def create_chart(query):
    chart_type = query["chart type"]
    x_axis = query["x axis"]
    y_axis = query["y axis"]
    filter_criteria = query["filter criteria"]

    filtered_data = data[data[filter_criteria["field name"]].apply(lambda x: eval(f'x {filter_criteria["operator"]} {filter_criteria["value"]}'))]

    # Plotting
    plt.figure(figsize=(8, 6))

    if chart_type == "bar chart":
        plt.bar(filtered_data[x_axis], filtered_data[y_axis["field name"]].agg(y_axis["aggregation applied"]))
    elif chart_type == "area chart":
        plt.fill_between(filtered_data[x_axis], filtered_data[y_axis["field name"]].agg(y_axis["aggregation applied"]))
    elif chart_type == "line chart":
        plt.plot(filtered_data[x_axis], filtered_data[y_axis["field name"]].agg(y_axis["aggregation applied"]))
    elif chart_type == "pie chart":
        plt.pie(filtered_data[y_axis["field name"]].agg(y_axis["aggregation applied"]), labels=filtered_data[x_axis])

    plt.title(f"{chart_type.capitalize()} Chart")
    plt.xlabel(x_axis)
    plt.ylabel(f"{y_axis['aggregation applied']}({y_axis['field name']})")
    st.pyplot()

# Streamlit UI
st.title("Chart Generator")

# Get JSON input from the user
json_input = st.text_area("Enter JSON input:")
try:
    query = eval(json_input)  # Convert string to dictionary
except:
    st.error("Invalid JSON input. Please enter a valid JSON.")
    query = None

# Generate chart based on the input
if query:
    st.subheader("Generated Chart:")
    if query["chart type"] == "Single Value":
        create_single_value_chart(query)
    else:
        create_chart(query)





import streamlit as st
import pandas as pd
import altair as alt

# Load the CSV data
data = pd.read_csv("data.csv")

# Get JSON input from the user
json_input = st.text_area("Enter JSON input:")

# Function to create the chart based on JSON specifications
def create_chart(json_input):
    chart_specs = json.loads(json_input)

    # Handle Single Value chart
    if chart_specs["chart type"] == "Single Value":
        field_name = chart_specs["field name"]
        aggregation = chart_specs["aggregation applied"]
        filtered_data = apply_filters(data, chart_specs.get("filter criteria", {}))
        value = apply_aggregation(filtered_data, field_name, aggregation)
        st.metric(label=field_name, value=value, delta=None)

    # Handle other chart types
    else:
        x_axis = chart_specs["x axis"]
        y_axis_field = chart_specs["y axis"]["field name"]
        y_axis_aggregation = chart_specs["y axis"]["aggregation applied"]
        filtered_data = apply_filters(data, chart_specs.get("filter criteria", {}))

        chart = create_altair_chart(chart_specs["chart type"], filtered_data, x_axis, y_axis_field, y_axis_aggregation)
        st.altair_chart(chart, use_container_width=True)

# Function to apply filters to the data
def apply_filters(data, filter_criteria):
    if filter_criteria:
        field_name = filter_criteria["field_name"]
        operator = filter_criteria["operator"]
        value = filter_criteria["value"]
        return data[eval(f"data['{field_name}'] {operator} {value}")].copy()
    else:
        return data

# Function to apply aggregation to a field
def apply_aggregation(data, field_name, aggregation):
    return eval(f"data['{field_name}'].{aggregation}()")

# Function to create Altair charts
def create_altair_chart(chart_type, data, x_axis, y_axis_field, y_axis_aggregation):
    if chart_type == "bar chart":
        return alt.Chart(data).mark_bar().encode(
            x=x_axis,
            y=alt.Y(f"{y_axis_aggregation}({y_axis_field}):Q")
        )
    elif chart_type == "area chart":
        return alt.Chart(data).mark_area().encode(
            x=x_axis,
            y=alt.Y(f"{y_axis_aggregation}({y_axis_field}):Q")
        )
    elif chart_type == "line chart":
        return alt.Chart(data).mark_line().encode(
            x=x_axis,
            y=alt.Y(f"{y_axis_aggregation}({y_axis_field}):Q")
        )
    elif chart_type == "pie chart":
        return alt.Chart(data).mark_pie().encode(
            theta=x_axis,
            value=alt.Y(f"{y_axis_aggregation}({y_axis_field}):Q")
        )
    else:
        st.error("Invalid chart type")
        return None

# Call the chart creation function
create_chart(json_input)

