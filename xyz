import numpy as np
from sentence_transformers import SentenceTransformer
from nmslib import Nmslib

# Sample data
data = {
    "SourceName": "name of the Source system",
    "L8n": "trading location of the Source system",
    "Currency": "Currency in which the amount of the position is denoted"
}

# Embedding model
model = SentenceTransformer('all-mpnet-base-v2')

# Create embeddings for field descriptions
embeddings = model.encode(list(data.values()))

# Indexing for efficient search
index = Nmslib(space='cosinesimil')
index.addDataPointBatch(embeddings)
index.createIndex({'post': 2}, print_progress=True)  # Adjust parameters for best performance

def vector_search(query):
    """Performs vector search and returns the most similar field name."""
    query_embedding = model.encode([query])[0]
    results = index.knnQuery(query_embedding, k=1)  # Find the closest match
    closest_index = results[0][0]
    return list(data.keys())[closest_index]

# Example usage
query = "location"
result = vector_search(query)
print("Most relevant field for '{}': {}".format(query, result))
