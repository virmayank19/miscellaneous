import numpy as np
from sentence_transformers import SentenceTransformer
from annoy import AnnoyIndex
from data_definitions import data1, positionData, LocationData

models = []
embeddings = []
indexes = []

def addDataSet(data, model_name='all-mpnet-base-v2'):
    model = SentenceTransformer(model_name)  # Choose a suitable model for each dataset
    models.append(model)
    dataset_embeddings = model.encode(list(data.values()))
    embeddings.append(dataset_embeddings)

    f = 768  # Dimensionality of the embeddings from the 'all-mpnet-base-v2' model
    t = AnnoyIndex(f, 'angular')  # Use angular distance for text similarity
    for i, embedding in enumerate(dataset_embeddings):
        t.add_item(i, embedding)
    t.build(10)  # Adjust the number of trees for performance
    indexes.append(t)

def vector_search(query, top_k=5):
    best_match_dataset = None
    best_match_distance = float('inf')

    for i, index in enumerate(indexes):
        query_embedding = models[i].encode([query])[0]
        nns = index.get_nns_by_vector(query_embedding, top_k, include_distances=True)

        avg_distance = np.mean(nns[1])

        if avg_distance < best_match_distance:
            best_match_distance = avg_distance
            best_match_dataset = data_names[i]  # Assuming you have a list of dataset names like ['data1', 'positionData', 'LocationData']

    results = []
    for idx, distance in zip(nns[0], nns[1]):
        field_name = list(data_names[i].keys())[idx]  # Assuming data_names is a list of dictionaries
        results.append((field_name, distance))

    return results, best_match_dataset

# Example usage
data_names = ['data1', 'positionData', 'LocationData']  # List of dataset names
addDataSet(data1, model_name='all-mpnet-base-v2-data1')
addDataSet(positionData, model_name='all-mpnet-base-v2-positionData')
addDataSet(LocationData, model_name='all-mpnet-base-v2-LocationData')

query = "location"
results, best_match_dataset = vector_search(query, top_k=5)
print(f"Top 5 matching results for '{query}' in the most relevant dataset '{best_match_dataset}':")
for result in results:
    print(result[0], " - Distance:", result[1])
