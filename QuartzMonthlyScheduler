public boolean isTimeIncluded(long timeStamp) {

    // Get the current date and time
    Date now = new Date(timeStamp);

    // Calculate the nth day of the current month
    int dayOfMonth = now.getDate(); // Use getDate() to get the day of the month (1-31)
    int targetDay = nthDay;

    // Check if the target day is greater than the number of days in the current month
    int daysInMonth = calculateDaysInMonth(now);
    if (targetDay > daysInMonth) {
        return false; // There are not enough days in this month, so the job can't run
    }

    // Get the day of the week for the nth day (0 = Sunday, 1 = Monday, ..., 6 = Saturday)
    now.setDate(targetDay); // Set the day of the month to 1 to find the day of the week for the 1st day
    int dayOfWeek = now.getDay();

	// If the nth day is a weekend, adjust it based on the user's input
	if (dayOfWeek == 6 || dayOfWeek == 0) { // Saturday or Sunday
		if (adjustment.equals("next")) {
			// If the user selects "next" and it's a weekend, move to the next Monday
			targetDay += (dayOfWeek == 6) ? 2 : 1;
		} else if (adjustment.equals("previous")) {
			// If the user selects "previous" and it's a weekend, move to the previous Friday
			targetDay -= (dayOfWeek == 6) ? 1 : 2;
		}
	}

    // Calculate the date for the nth day
    Date nextRunDate = new Date(now.getYear(), now.getMonth(), targetDay);

    // Return true if the current date is the same as the calculated nth day, otherwise false
    return dayOfMonth == targetDay && now.getMonth() == nextRunDate.getMonth();
}

// Helper method to calculate the number of days in a month
private int calculateDaysInMonth(Date date) {
    // Create a copy of the date and set the day to 1
    Date firstDayOfMonth = new Date(date.getYear(), date.getMonth(), 1);

    // Set the day to 32 to get the next month's first day and subtract to find the last day of the current month
    firstDayOfMonth.setDate(32);

    // The day of the month will be the last day of the current month
    return 32 - firstDayOfMonth.getDate();
}
